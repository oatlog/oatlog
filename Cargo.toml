[workspace]
members = [
    "oatlog",
    "oatlog-core",
    "oatlog-macro",
    "oatlog-test",
    "oatlog-bench",
    "examples/math",
    "comparative-test",
]
resolver = "2"

[workspace.dependencies]
oatlog.path = "oatlog"
oatlog-core.path = "oatlog-core"
oatlog-macro.path = "oatlog-macro"
oatlog-test.path = "oatlog-test"
oatlog-bench.path = "oatlog-bench"
comparative-test.path = "comparative-test"

ariadne = { version = "0.5", features = ["auto-color"] }
clap = { version = "4", features = ["derive"]}
educe = "0.6"
egglog = "0.4"
eqlog-runtime = "0.8"
expect-test = "1"
heck = "0.5"
itertools = "0.14"
proc-macro2 = { version = "1", features = ["span-locations"], default-features = false }
quote = "1"
regex = "1"
syn = "2"
smallvec = { version = "1.14.0", features = ["union"] }
derive_more = { version = "2.0.1", features = ["full"] }
criterion = "0.3"

[profile.release]
debug = true

[workspace.lints.rust]
unsafe_code = "deny" # override to allow per file
unknown_lints = "deny"
renamed_and_removed_lints = "deny"

rust_2018_idioms = { level = "warn", priority = -1 }
nonstandard_style = { level = "warn", priority = -1 }
future_incompatible = { level = "warn", priority = -1 }
unexpected_cfgs = "warn"

[workspace.lints.clippy]
correctness = { level = "deny", priority = -1 }
suspicious = { level = "deny", priority = -1 }

complexity = { level = "warn", priority = -1 }
type_complexity = "allow"
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }

pedantic = { level = "warn", priority = -1 }
mismatching_type_param_order = "allow"
missing_panics_doc = "allow"
needless_pass_by_value = "allow"
similar_names = "allow"
too_many_lines = "allow"


# cargo
cargo_common_metadata = "allow"
multiple_crate_versions = "warn"
negative_feature_names = "warn"
redundant_feature_names = "warn"
wildcard_dependencies = "warn"

# restrict
self_named_module_files = "deny"
#absolute_paths = "warn"
#alloc_instead_of_core = "warn"
#allow_attributes = "warn"
#allow_attributes_without_reason = "warn"
#arbitrary_source_item_ordering = "warn"
#arithmetic_side_effects = "warn"
#as_conversions = "warn"
#as_pointer_underscore = "warn"
as_underscore = "warn"
assertions_on_result_states = "warn"
#big_endian_bytes = "warn"
cfg_not_test = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
#decimal_literal_representation = "warn"
#default_numeric_fallback = "warn"
default_union_representation = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
#doc_include_without_cfg = "warn"
else_if_without_else = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
#exhaustive_enums = "warn"
#exhaustive_structs = "warn"
exit = "warn"
#expect_used = "warn"
#field_scoped_visibility_modifiers = "warn"
filetype_is_file = "warn"
float_arithmetic = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
get_unwrap = "warn"
#host_endian_bytes = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
#implicit_return = "warn"
#indexing_slicing = "warn"
infinite_loop = "warn"
#inline_asm_x86_att_syntax = "warn"
#inline_asm_x86_intel_syntax = "warn"
#integer_division = "warn"
#integer_division_remainder_used = "warn"
iter_over_hash_type = "warn" # deterministic tests
#large_include_file = "warn"
#let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
#little_endian_bytes = "warn"
#lossy_float_literal = "warn"
#map_err_ignore = "warn"
#map_with_unused_argument_over_ranges = "warn"
#mem_forget = "warn"
#min_ident_chars = "warn"
#missing_assert_message = "warn"
#missing_asserts_for_indexing = "warn"
#missing_docs_in_private_items = "warn"
#missing_inline_in_public_items = "warn"
#missing_trait_methods = "warn"
mixed_read_write_in_expression = "warn"
module_name_repetitions = "warn"
#modulo_arithmetic = "warn"
#multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
mutex_atomic = "warn"
mutex_integer = "warn"
needless_raw_strings = "warn"
non_ascii_literal = "warn"
non_zero_suggestions = "warn"
#panic = "warn"
#panic_in_result_fn = "warn"
partial_pub_fields = "warn"
pathbuf_init_then_push = "warn"
#pattern_type_mismatch = "warn"
#precedence_bits = "warn"
#print_stderr = "warn"
#print_stdout = "warn"
#pub_use = "warn"
#pub_with_shorthand = "warn"
#pub_without_shorthand = "warn"
#question_mark_used = "warn"
#rc_buffer = "warn"
#rc_mutex = "warn"
redundant_type_annotations = "warn"
ref_patterns = "warn"
#renamed_function_params = "warn"
rest_pat_in_fully_bound_structs = "warn"
#return_and_then = "warn"
same_name_method = "warn"
#semicolon_inside_block = "warn"
#semicolon_outside_block = "warn"
#separated_literal_suffix = "warn"
#shadow_reuse = "warn"
#shadow_same = "warn"
#shadow_unrelated = "warn"
#single_call_fn = "warn"
#single_char_lifetime_names = "warn"
#std_instead_of_alloc = "warn"
#std_instead_of_core = "warn"
#str_to_string = "warn"
#string_add = "warn"
string_lit_chars_any = "warn"
#string_slice = "warn"
#string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
#todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
#unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
#unneeded_field_pattern = "warn"
#unreachable = "warn"
unseparated_literal_suffix = "warn"
unused_result_ok = "warn"
unused_trait_names = "warn"
#unwrap_in_result = "warn"
#unwrap_used = "warn"
#use_debug = "warn"
verbose_file_reads = "warn"
#wildcard_enum_match_arm = "warn"
